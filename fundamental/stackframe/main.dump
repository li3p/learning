
main:     file format mach-o-x86-64


Disassembly of section .text:

0000000100003ed8 <_swap>:
int swap(int *a, int *b)
{
   100003ed8:	55                   	push   %rbp
   100003ed9:	48 89 e5             	mov    %rsp,%rbp
   100003edc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   100003ee0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   int c, d, e;
   d = 0xdd + *a;
   100003ee4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   100003ee8:	8b 00                	mov    (%rax),%eax
   100003eea:	05 dd 00 00 00       	add    $0xdd,%eax
   100003eef:	89 45 fc             	mov    %eax,-0x4(%rbp)
   e = 0xee + *b;
   100003ef2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   100003ef6:	8b 00                	mov    (%rax),%eax
   100003ef8:	05 ee 00 00 00       	add    $0xee,%eax
   100003efd:	89 45 f8             	mov    %eax,-0x8(%rbp)
   c = *a;
   100003f00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   100003f04:	8b 00                	mov    (%rax),%eax
   100003f06:	89 45 f4             	mov    %eax,-0xc(%rbp)
   *a = *b;
   100003f09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   100003f0d:	8b 10                	mov    (%rax),%edx
   100003f0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   100003f13:	89 10                	mov    %edx,(%rax)
   *b = c;
   100003f15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   100003f19:	8b 55 f4             	mov    -0xc(%rbp),%edx
   100003f1c:	89 10                	mov    %edx,(%rax)
   return c + 2 + d + e;
   100003f1e:	8b 45 f4             	mov    -0xc(%rbp),%eax
   100003f21:	8d 50 02             	lea    0x2(%rax),%edx
   100003f24:	8b 45 fc             	mov    -0x4(%rbp),%eax
   100003f27:	01 c2                	add    %eax,%edx
   100003f29:	8b 45 f8             	mov    -0x8(%rbp),%eax
   100003f2c:	01 d0                	add    %edx,%eax
}
   100003f2e:	5d                   	pop    %rbp
   100003f2f:	c3                   	ret

0000000100003f30 <_main>:

int main(void)
{
   100003f30:	55                   	push   %rbp
   100003f31:	48 89 e5             	mov    %rsp,%rbp
   100003f34:	48 83 ec 10          	sub    $0x10,%rsp          ; main.%rsp 扩展出16字节栈帧空间
   int a;
   int b;
   int ret;
   int c;
   a = 16;
   100003f38:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%rbp)    ; main.%rbp - 12 存入 a=16
   b = 64;
   100003f3f:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%rbp)   ; main.%rbp - 16 存入 b=64
   ret = 10;
   100003f46:	c7 45 fc 0a 00 00 00 	movl   $0xa,-0x4(%rbp)     ; main.%rbp - 04 存入 ret=0
   c = swap(&a, &b);
   100003f4d:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx    ; 将 b 变量地址放入 rdx 寄存器
   100003f51:	48 8d 45 f4          	lea    -0xc(%rbp),%rax     ; 将 a 变量地址放入 rax 寄存器
   100003f55:	48 89 d6             	mov    %rdx,%rsi           ; b 变量地址放入 rsi
   100003f58:	48 89 c7             	mov    %rax,%rdi           ; a 变量地址放入 rdi
   100003f5b:	e8 78 ff ff ff       	call   100003ed8 <_swap>   ; 函数调用，会
   100003f60:	89 45 f8             	mov    %eax,-0x8(%rbp)     ; 将 eax 寄存器中的值存入 c 变量
   ret = a - b + c;
   100003f63:	8b 55 f4             	mov    -0xc(%rbp),%edx     ; a 变量值放入 edx
   100003f66:	8b 45 f0             	mov    -0x10(%rbp),%eax    ; b 变量值放入 eax
   100003f69:	29 c2                	sub    %eax,%edx           ; 执行 a-b，放到 edx，也就是 a 原来的寄存器
   100003f6b:	8b 45 f8             	mov    -0x8(%rbp),%eax     ; 将c的值放到 eax
   100003f6e:	01 d0                	add    %edx,%eax           ; 执行 +c
   100003f70:	89 45 fc             	mov    %eax,-0x4(%rbp)     ; 将结果值保存到 ret中
   return ret;
   100003f73:	8b 45 fc             	mov    -0x4(%rbp),%eax     ; 同时作为函数的返回值放到 eax 中
}
   100003f76:	c9                   	leave                      ; 相当于 mov %rbp, %rsp 和 pop %rbp
   100003f77:	c3                   	ret                        ; 相当于 pop %rip
